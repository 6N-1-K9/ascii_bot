import os
import random
import logging
import pyfiglet
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    Application, CommandHandler, MessageHandler,
    ContextTypes, ConversationHandler, filters
)

# –í–∫–ª—é—á–∏–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
TEXT, CHOICE, FONT_NUMBER = range(3)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_data = {}

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
STYLED_TEXT_DIR = "styled_text"
os.makedirs(STYLED_TEXT_DIR, exist_ok=True)

async def send_examples_file(update: Update) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∞–π–ª examples.txt –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    try:
        examples_file = "examples.txt"
        if os.path.exists(examples_file):
            with open(examples_file, 'rb') as f:
                await update.message.reply_document(
                    document=f,
                    filename=examples_file,
                    caption="üìã –ü—Ä–∏–º–µ—Ä—ã —Ç–µ–∫—Å—Ç–æ–≤ –¥–ª—è ASCII-–∞—Ä—Ç–∞"
                )
        else:
            await update.message.reply_text(
                "‚ùå –§–∞–π–ª examples.txt –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞."
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ examples: {e}")
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏."
        )

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –∏ –ø—Ä–æ—Å–∏—Ç –≤–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç."""
    await update.message.reply_text(
        "üé® –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ASCII Art Bot!\n\n"
        "üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ ASCII-–∞—Ä—Ç:",
        reply_markup=ReplyKeyboardRemove()
    )
    
    return TEXT

async def save_and_send_ascii_art(update: Update, user_text: str, font_name: str, ascii_art: str) -> None:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç ASCII-–∞—Ä—Ç –≤ —Ñ–∞–π–ª –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    try:
        # –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞
        filename = f"ascii_art_{random.randint(1000, 9999)}.txt"
        filepath = os.path.join(STYLED_TEXT_DIR, filename)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
        with open(filepath, 'w', encoding='utf-8') as f:
            f.write(f"–¢–µ–∫—Å—Ç: {user_text}\n")
            f.write(f"–®—Ä–∏—Ñ—Ç: {font_name}\n")
            f.write("=" * 50 + "\n")
            f.write(ascii_art)
            f.write("=" * 50 + "\n")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–±–µ–∑ parse_mode –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ—à–∏–±–æ–∫ —Ä–∞–∑–º–µ—Ç–∫–∏)
        if len(ascii_art) > 1000:
            # –î–ª—è –¥–ª–∏–Ω–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —à—Ä–∏—Ñ—Ç–µ
            await update.message.reply_text(
                f"‚úÖ –®—Ä–∏—Ñ—Ç: {font_name}\n\n"
                f"üìù –í–∞—à —Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏, "
                f"–Ω–æ –æ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª–µ –Ω–∏–∂–µ üëá",
                reply_markup=ReplyKeyboardRemove()
            )
        else:
            # –î–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
            await update.message.reply_text(
                f"‚úÖ –®—Ä–∏—Ñ—Ç: {font_name}\n\n"
                f"üìù –í–∞—à —Ç–µ–∫—Å—Ç:\n<pre>{ascii_art}</pre>",
                parse_mode='HTML',
                reply_markup=ReplyKeyboardRemove()
            )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        with open(filepath, 'rb') as f:
            await update.message.reply_document(
                document=f,
                filename=filename,
                caption=f"üìÅ –§–∞–π–ª —Å –≤–∞—à–∏–º ASCII-–∞—Ä—Ç–æ–º\n–®—Ä–∏—Ñ—Ç: {font_name}"
            )
            
        await update.message.reply_text(
            "–•–æ—Ç–∏—Ç–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π —Ç–µ–∫—Å—Ç? –í–≤–µ–¥–∏—Ç–µ –µ–≥–æ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏/–æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {e}")
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ parse_mode —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ —Ä–∞–∑–º–µ—Ç–∫–∏
        await update.message.reply_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}\n\n"
            f"–ù–æ –≤–æ—Ç –≤–∞—à —Ç–µ–∫—Å—Ç:\n\n{ascii_art}\n\n"
            f"–®—Ä–∏—Ñ—Ç: {font_name}"
        )

    return TEXT

async def get_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_text = update.message.text
    chat_id = update.message.chat_id

    user_data[chat_id] = {'text': user_text}
    all_fonts = pyfiglet.FigletFont.getFonts()
    user_data[chat_id]['fonts'] = all_fonts

    keyboard = [
        ['üé≤ –°–ª—É—á–∞–π–Ω—ã–π —à—Ä–∏—Ñ—Ç', 'üî¢ –í—ã–±—Ä–∞—Ç—å –Ω–æ–º–µ—Ä–æ–º'],
        ['üìã –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–º–µ—Ä—ã']
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)

    await update.message.reply_text(
        f"‚úÖ –¢–µ–∫—Å—Ç –ø–æ–ª—É—á–µ–Ω: '{user_text}'\n\n"
        f"üìä –î–æ—Å—Ç—É–ø–Ω–æ —à—Ä–∏—Ñ—Ç–æ–≤: {len(all_fonts)}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≤—ã–±–æ—Ä–∞ —à—Ä–∏—Ñ—Ç–∞:",
        reply_markup=reply_markup
    )

    return CHOICE

async def random_font(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Å–ª—É—á–∞–π–Ω–æ–≥–æ —à—Ä–∏—Ñ—Ç–∞."""
    chat_id = update.message.chat_id
    user_text = user_data[chat_id]['text']
    all_fonts = user_data[chat_id]['fonts']

    font_name = random.choice(all_fonts)

    try:
        ascii_art = pyfiglet.figlet_format(user_text, font=font_name)
        await save_and_send_ascii_art(update, user_text, font_name, ascii_art)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ random_font: {e}")
        await update.message.reply_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ ASCII-–∞—Ä—Ç–∞: {e}\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —à—Ä–∏—Ñ—Ç –∏–ª–∏ —Ç–µ–∫—Å—Ç."
        )

    return ConversationHandler.END


async def choose_font_number(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞."""
    chat_id = update.message.chat_id
    all_fonts = user_data[chat_id]['fonts']

    await update.message.reply_text(
        f"üî¢ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ (–æ—Ç 1 –¥–æ {len(all_fonts)}):\n\n"
        "–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –Ω–æ–º–µ—Ä–∞:\n"
        "1 - standard\n"
        "3 - slant\n"
        "4 - 3-d\n"
        "5 - bubble\n"
        "6 - block\n"
        "7 - doom",
        reply_markup=ReplyKeyboardRemove()
    )

    return FONT_NUMBER

async def send_examples(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –ø—Ä–∏–º–µ—Ä–æ–≤."""
    await send_examples_file(update)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —à—Ä–∏—Ñ—Ç–∞
    chat_id = update.message.chat_id
    user_text = user_data[chat_id]['text']
    all_fonts = user_data[chat_id]['fonts']

    keyboard = [
        ['üé≤ –°–ª—É—á–∞–π–Ω—ã–π —à—Ä–∏—Ñ—Ç', 'üî¢ –í—ã–±—Ä–∞—Ç—å –Ω–æ–º–µ—Ä–æ–º'],
        ['üìã –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–º–µ—Ä—ã']
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)

    await update.message.reply_text(
        f"üìù –í–∞—à —Ç–µ–∫—Å—Ç: '{user_text}'\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≤—ã–±–æ—Ä–∞ —à—Ä–∏—Ñ—Ç–∞:",
        reply_markup=reply_markup
    )

    return CHOICE

async def get_font_number(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞."""
    chat_id = update.message.chat_id
    user_text = user_data[chat_id]['text']
    all_fonts = user_data[chat_id]['fonts']

    try:
        font_number = int(update.message.text)
        if 1 <= font_number <= len(all_fonts):
            font_name = all_fonts[font_number - 1]
            ascii_art = pyfiglet.figlet_format(user_text, font=font_name)
            
            await save_and_send_ascii_art(update, user_text, font_name, ascii_art)
            
        else:
            await update.message.reply_text(
                f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ {len(all_fonts)}"
            )
            return FONT_NUMBER

    except ValueError:
        await update.message.reply_text(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!"
        )
        return FONT_NUMBER

    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω–∞ –¥–∏–∞–ª–æ–≥–∞."""
    user = update.message.from_user
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.first_name} –æ—Ç–º–µ–Ω–∏–ª –¥–∏–∞–ª–æ–≥.")

    await update.message.reply_text(
        "–î–∏–∞–ª–æ–≥ –æ—Ç–º–µ–Ω–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.",
        reply_markup=ReplyKeyboardRemove()
    )

    return ConversationHandler.END

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏."""
    help_text = (
        "ü§ñ ASCII Art Bot Help\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ ASCII-–∞—Ä—Ç–∞\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
        "/cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥\n\n"
        "–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:\n"
        "1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start\n"
        "2. –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç\n"
        "3. –í—ã–±–µ—Ä–∏—Ç–µ —à—Ä–∏—Ñ—Ç (—Å–ª—É—á–∞–π–Ω—ã–π –∏–ª–∏ –ø–æ –Ω–æ–º–µ—Ä—É)\n"
        "4. –ü–æ–ª—É—á–∏—Ç–µ –∫—Ä–∞—Å–∏–≤—ã–π ASCII-–∞—Ä—Ç + —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª!\n\n"
        "–î–æ—Å—Ç—É–ø–Ω–æ –±–æ–ª–µ–µ 500 —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —à—Ä–∏—Ñ—Ç–æ–≤!"
    )

    await update.message.reply_text(help_text)

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫."""
    logger.error(f"–û—à–∏–±–∫–∞: {context.error}")
    if update and update.message:
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start"
        )

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    # –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –°–¢–†–û–ö–ê - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:
    
    # –í–∞—Ä–∏–∞–Ω—Ç 1: –ü—Ä—è–º–æ–µ —É–∫–∞–∑–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
    token = '7916292269:AAGwFzx2RGdGMOaQlFSQEGnSMQFCkMmug0o'
    
    # –í–∞—Ä–∏–∞–Ω—Ç 2: –ß–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è (–ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ—ë)
    # token = os.getenv('TELEGRAM_BOT_TOKEN')
    
    if not token:
        logger.error("–ù–µ –∑–∞–¥–∞–Ω TELEGRAM_BOT_TOKEN!")
        return

    application = Application.builder().token(token).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            TEXT: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_text)],
            CHOICE: [
                MessageHandler(filters.Regex('^üé≤ –°–ª—É—á–∞–π–Ω—ã–π —à—Ä–∏—Ñ—Ç$'), random_font),
                MessageHandler(filters.Regex('^üî¢ –í—ã–±—Ä–∞—Ç—å –Ω–æ–º–µ—Ä–æ–º$'), choose_font_number),
                MessageHandler(filters.Regex('^üìã –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–º–µ—Ä—ã$'), send_examples)
            ],
            FONT_NUMBER: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_font_number)]
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )

    application.add_handler(conv_handler)
    application.add_handler(CommandHandler('help', help_command))
    application.add_handler(CommandHandler('cancel', cancel))
    application.add_error_handler(error_handler)

    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
    application.run_polling()

if __name__ == '__main__':
    main()